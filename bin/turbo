#!/usr/bin/env ruby

require "thor"
require 'term/ansicolor'
require "turbo"

def get_real_path(path)
  File.join(File.dirname(File.expand_path(__FILE__)), "../lib/#{path}")
end

class TurboApp < Thor

  desc "generate", "Generate a workflow"
  def generate(name)

    if File.exist? "workflows/#{name}"
      puts "workflow #{name.green} has already exist under workflows/#{name}"
      return
    end

    FileUtils.mkdir_p "workflows"
    FileUtils.mkdir_p "workflows/#{name}"

    FileUtils.mkdir_p "workflows/#{name}/bin"
    FileUtils.mkdir_p "workflows/#{name}/data"
    FileUtils.mkdir_p "workflows/#{name}/scenarios"

    FileUtils.copy File.join(File.dirname(File.expand_path(__FILE__)), "../lib/templates/before.sh"), "workflows/#{name}/bin/before.sh"
    FileUtils.copy File.join(File.dirname(File.expand_path(__FILE__)), "../lib/templates/after.sh"), "workflows/#{name}/bin/after.sh"

    FileUtils.copy File.join(File.dirname(File.expand_path(__FILE__)), "../lib/templates/resource.json"), "workflows/#{name}/data/resource.json"
    FileUtils.copy File.join(File.dirname(File.expand_path(__FILE__)), "../lib/templates/resource-get.json"), "workflows/#{name}/scenarios/resource-get.json"

    FileUtils.copy File.join(File.dirname(File.expand_path(__FILE__)), "../lib/templates/workflow.json"), "workflows/#{name}/workflow.json"

    puts "Workflow `#{name.green}` is generated under workflows/#{name}"
    puts "Run `turbo start #{name.green}` to start the workflow"
  end

  desc "start", "specify the workflow name"
  method_option :config, :aliases => "-c", :desc => "configuration file"
  def start(workflow)
    config = options[:config]
    turbo = Turbo.new(config)

    if(!File.exist?("workflows/#{workflow}/workflow.json"))
      puts "Workflow `#{workflow.green}` does not exist"
      puts "Run `turbo generate #{workflow.green}` to generate it first"
      return
    end

    turbo.run_workflow(workflow)
  end

  desc "list", "list all workflows"
  def list
    if(File.exist?("workflows"))
      system ('ls workflows/')
    else
      puts "No workflow found, you can generate one by using `turob generate my-workflow`"
    end
  end
end

TurboApp.start
